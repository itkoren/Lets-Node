[{
    "steps": [
        [{
            "name": "img",
            "attributes": {
                "src": "https://cloud.githubusercontent.com/assets/3624786/3085138/6ce5442c-e509-11e3-9fa1-312bbaf05da4.png",
                "class": "absolute-element",
                "style": "position: absolute; max-height: none; max-width: none; width: 516px; height: 480px; z-index: 4; left: 225px; top: 137px;"
            }
        }, {
            "name": "h2",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 594px; height: 95px; z-index: 4; left: 198px; top: 64px;"
            },
            "value": "Reggie"
        }, {
            "name": "notes",
            "value": [
                "For working with internal modules, LivePerson is using Reggie"
            ]
        }],
        [{
            "name": "p",
            "value": "<a href=\"https://github.com/mbrevoort/node-reggie\">Reggie</a> is a NodeJS server which is a lightweight alternative to a full blown npm registry"
        }, {
            "name": "notes",
            "value": [
                "As for today, there is no simple out of the box solution for managing a private NPM repository",
                "Doing it, still requires managing a full replication of the public repository",
                "There is a proxy solution (Kappa) from PayPal that we still need to check, but currently we are using Reggie which is a very simple solution",
                "Lets see what we have inside - via postman",
                ""
            ]
        }],
        [{
            "name": "div",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 989px; height: 488px; max-height: none; max-width: none; left: 10px; top: 100px; z-index: 6;"
            },
            "value": [{
                "name": "iframe",
                "attributes": {
                    "src": "https://itkoren.github.io/egist/?data-gist-id=9869038&amp;data-gist-file=.29.reggie.sh",
                    "style": "width: 100%; height: 100%;"
                }
            }]
        }, {
            "name": "notes",
            "value": [
                ""
            ]
        }]
    ]
}, {
    "steps": [
        [{
            "name": "img",
            "attributes": {
                "src": "https://cloud.githubusercontent.com/assets/3624786/3096606/ff4a3710-e5d5-11e3-8c94-88a130221d57.png",
                "class": "absolute-element",
                "style": "position: absolute; max-height: none; max-width: none; width: 616px; height: 410px; z-index: 4; left: 185px; top: 137px;"
            }
        }, {
            "name": "h2",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 594px; height: 95px; z-index: 4; left: 198px; top: 64px;"
            },
            "value": "LivePerson Modules"
        }, {
            "name": "notes",
            "value": [
                "Formally, We started working with Node in LivePerson, almost a year ago"
            ]
        }],
        [{
            "name": "h2",
            "value": "NodeJS in LivePerson"
        }, {
            "name": "p",
            "value": "<br>"
        }, {
            "name":"ul",
            "value":[
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "0"
                    },
                    "value" : "Two Server Applications in GA (Loggos & Batchelor)"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "1"
                    },
                    "value" : "7 Internal Modules"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "2"
                    },
                    "value" : "2 More Projects in Work (Collaboration & Labs)"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "3"
                    },
                    "value" : "Many More Expected Node Projects in Queue"
                }
            ]
        }, {
            "name": "notes",
            "value": [
                "Available Modules: lp_js_gate_keeper, lp_js_http_status, lp_js_localcache, lp_js_logger, lp_js_service_status, lp_js_security_utils, lp_js_service_directory",
                "",
                "Go to Reggie and talk a little about existing modules",
                "We've Created the Integration and Services LivePerson Uses Like Cassandra, Service Directory, etc. Rapidly, without the need to use the company java implementations",
                "",
                "I would like to ask Efim to talk a little about LivePerson Modules and our vision"
            ]
        }]
    ]
}, {
    "steps": [
        [{
            "name": "img",
            "attributes": {
                "src": "https://cloud.githubusercontent.com/assets/3624786/3019611/93104c48-df94-11e3-9036-b9d00d4cb95e.png",
                "class": "absolute-element",
                "style": "position: absolute; max-height: none; max-width: none; width: 316px; height: 310px; z-index: 4; left: 325px; top: 337px;"
            }
        }, {
            "name": "h2",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 594px; height: 95px; z-index: 4; left: 198px; top: 164px;"
            },
            "value": "Benchmarking and Stress Testing"
        }, {
            "name": "notes",
            "value": [
                "There comes a time during our application development phase, that we would like to understand its limits"
            ]
        }],
        [{
            "name": "h2",
            "value": "Importance of Stress Testing"
        }, {
            "name": "p",
            "value": "<br>"
        }, {
            "name":"ul",
            "value":[
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "0"
                    },
                    "value" : "Understanding the maximum load our application can handle"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "1"
                    },
                    "value" : "Learning where our Node program spends its time"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "2"
                    },
                    "value" : "Exposing memory leaks and bottlenecks"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "3"
                    },
                    "value" : "Making sure our application is dealing with basic load without \"melting\""
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "4"
                    },
                    "value" : "++"
                }, {
                    "name": "notes",
                    "value": [
                        "Lets talk about creating load"
                    ]
                }
            ]
        }],
        [{
            "name": "h2",
            "value": "Important to Remember"
        }, {
            "name": "div",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 989px; height: 360px; max-height: none; max-width: none; left: 10px; top: 100px; z-index: 6;"
            },
            "value": [{
                "name": "iframe",
                "attributes": {
                    "src": "https://itkoren.github.io/egist/?data-gist-id=9869038&amp;data-gist-file=.31.profiling.and.stress.testing.sh",
                    "style": "width: 100%; height: 100%;"
                }
            }]
        }, {
            "name": "notes",
            "value": [
                "Important to remember when testing locally"
            ]
        }],
        [{
            "name":"p",
            "value":"Use <a href\"https://github.com/alexfernandez/loadtest\">loadtest</a> or tools like <a href=\"https://github.com/11main/nodeload\">nodeload</a> for local stress testing"
        }, {
            "name": "notes",
            "value": [
                "Before we'll deal with distributed stress testing, Lets start with local tests",
                "",
                "Lets see the loadtest module",
                "",
                "But this is not enough for understanding the real numbers our application supports",
                "For that we will need to conduct distributed stress testing"
            ]
        }],
        [{
            "name":"h2",
            "value":"Distributed Stress Testing Tools"
        }, {
            "name": "p",
            "value": "<br>"
        }, {
            "name":"ul",
            "value":[
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "0"
                    },
                    "value" : "<a href=\"https://github.com/jugglinmike/beeswithmachineguns\">Bees with Machine Guns</a>"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "1"
                    },
                    "value" : "<a href=\"https://www.blitz.io/\">Blitz.IO</a>"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "2"
                    },
                    "value" : "<a href=\"http://www.redline13.com/\">RedLine13</a>"
                }
            ]
        }, {
            "name": "notes",
            "value": [
                "Before we'll deal with distributed stress testing, Lets start with local tests",
                "",
                "Lets see the loadtest module",
                "",
                "But this is not enough for understanding the real numbers our application supports",
                "For that we will need to conduct distributed stress testing"
            ]
        }]
    ]
}, {
    "steps": [
        [{
            "name": "img",
            "attributes": {
                "src": "https://cloud.githubusercontent.com/assets/3624786/3110798/8461339e-e6a9-11e3-9b2c-8b28a0fc2c9e.png",
                "class": "absolute-element",
                "style": "position: absolute; max-height: none; max-width: none; width: 516px; height: 480px; z-index: 4; left: 225px; top: 137px;"
            }
        }, {
            "name": "h2",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 594px; height: 95px; z-index: 4; left: 198px; top: 64px;"
            },
            "value": "Deployment & RPM"
        }, {
            "name": "notes",
            "value": [
                "We are almost ready for deploying our application",
                "",
                "In order to do so, we will need to create an RPM for our project",
                "Usually, we are using a defined build process which includes code validation (jshint), running tests and producing the RPM",
                "This process can also deploy the RPM to a selected environments and run automation tests on it",
                "This is created using Grunt and Maven as a container while the RPM is created using puppet",
                "",
                "I would like to invite Omer H. to talk about the build process and deployment"
            ]
        }]
    ]
}, {
    "steps": [
        [{
            "name": "img",
            "attributes": {
                "src": "https://cloud.githubusercontent.com/assets/3624786/3122566/a49b9cc0-e768-11e3-93a6-72c6049953fb.png",
                "class": "absolute-element",
                "style": "position: absolute; max-height: none; max-width: none; width: 516px; height: 480px; z-index: 4; left: 225px; top: 197px;"
            }
        }, {
            "name": "h2",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 594px; height: 95px; z-index: 4; left: 198px; top: 64px;"
            },
            "value": "Realtime Streaming with WebSockets"
        }, {
            "name": "notes",
            "value": [
                "Up until now we learned what is Node and how we can use its advantages",
                "We saw how we can create a fast Node HTTP Web server which handles large amount of requests but everything was based on HTTP",
                "",
                "One of the core technologies powering the web is HTTP",
                "Unfortunately, HTTP current version 1.1, was last updated around 1999 and in fact hardly changed since roughly 1996",
                "",
                "Meanwhile the web had changed quite a bit with dynamic content, pages with many resources, single page applications and much more",
                "",
                "For many years, HTTP and real-time applications didn’t really go together very well"
            ]
        }],
        [{
            "name": "h2",
            "value": "What is wrong with HTTP for real-time applications?"
        }, {
            "name": "p",
            "value": "<br>"
        }, {
            "name":"ul",
            "value":[
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "0"
                    },
                    "value" : "Designed around a request-response model (message based protocol)"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "1"
                    },
                    "value" : "All HTTP communications are initiated by the client"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "2"
                    },
                    "value" : "Request must wait for response (connection is not fully utilized)"
                },
                {
                    "name" : "li",
                    "attributes" : {
                        "class" : "fragment",
                        "data-fragment-index" : "3"
                    },
                    "value" : "One slow response delays all the other requests (head of line blocking)"
                }
            ]
        }],
        [{
            "name": "p",
            "value": "WebSockets give browsers the ability to communicate with a server over a full-duplex communication channel"
        }, {
            "name": "notes",
            "value": [
                "But Node is best fitting DIRTy applications - these can use one of the most prominent technologies today - WebSockets",
                "The WebSocket protocol was developed to overcome the shortcomings of HTTP in relation to real-time applications",
                "WebSockets give browsers the ability to communicate with a server over a full-duplex communication channel",
                "At its core, a WebSocket connection is just a conventional TCP connection between an HTTP server and an HTTP client"
            ]
        }],
        [{
            "name": "h2",
            "value": "Handshake"
        }, {
            "name": "div",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 989px; height: 488px; max-height: none; max-width: none; left: 10px; top: 100px; z-index: 6;"
            },
            "value": [{
                "name": "iframe",
                "attributes": {
                    "src": "https://itkoren.github.io/egist/?data-gist-id=9869038&amp;data-gist-file=.33.websockets.handshake.txt",
                    "style": "width: 100%; height: 100%;"
                }
            }]
        }, {
            "name": "notes",
            "value": [
                "At its core, a WebSocket connection is just a conventional TCP connection between an HTTP server and an HTTP client.",
                "It’s established using a handshake protocol, which is very similar to an HTTP handshake",
                "Although this starts out as a regular HTTP connection, the client asks to “upgrade” this connection to a WebSocket connection"
            ]
        }],
        [{
            "name": "h2",
            "value": "Upgrade"
        }, {
            "name": "div",
            "attributes": {
                "class": "absolute-element",
                "style": "position: absolute; width: 989px; height: 488px; max-height: none; max-width: none; left: 10px; top: 100px; z-index: 6;"
            },
            "value": [{
                "name": "iframe",
                "attributes": {
                    "src": "https://itkoren.github.io/egist/?data-gist-id=9869038&amp;data-gist-file=.33.websockets.upgrade.txt",
                    "style": "width: 100%; height: 100%;"
                }
            }]
        }, {
            "name": "notes",
            "value": [
                "If the server supports the WebSocket protocol, it answers like this:"
            ]
        }]
    ]
}]